require('dotenv').config();
const axios = require('axios');
const schedule = require('node-schedule');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const reminders = new Map();

// –§–æ—Ä–º–∞—Ç: /remind 15:30 –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text;

  if (text === '/start') {
    return sendMessage(chatId, 
      `‚è∞ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/remind HH:MM –¢–µ–∫—Å—Ç - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n` +
      `/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
      `/cancel ID - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ`
    );
  }

  if (text === '/list') {
    const userReminders = Array.from(reminders.entries())
      .filter(([_, reminder]) => reminder.chatId === chatId)
      .map(([id, reminder]) => `${id}: ${reminder.time} - ${reminder.text}`);
    
    return sendMessage(chatId, 
      userReminders.length ? 
      `üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${userReminders.join('\n')}` : 
      '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'
    );
  }

  if (text.startsWith('/remind')) {
    const parts = text.split(' ');
    if (parts.length < 3) {
      return sendMessage(chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remind HH:MM –¢–µ–∫—Å—Ç');
    }

    const time = parts[1];
    const reminderText = parts.slice(2).join(' ');
    const [hours, minutes] = time.split(':').map(Number);

    if (isNaN(hours) || isNaN(minutes) || hours > 23 || minutes > 59) {
      return sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30)');
    }

    const reminderId = Date.now();
    const job = schedule.scheduleJob({ hour: hours, minute: minutes }, () => {
      sendMessage(chatId, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminderText}`);
      reminders.delete(reminderId);
    });

    reminders.set(reminderId, {
      chatId,
      time,
      text: reminderText,
      job
    });

    return sendMessage(chatId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ ${time} (ID: ${reminderId})`);
  }

  if (text.startsWith('/cancel')) {
    const reminderId = parseInt(text.split(' ')[1]);
    if (!reminders.has(reminderId)) {
      return sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    reminders.get(reminderId).job.cancel();
    reminders.delete(reminderId);
    return sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
  }

  return sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId, text) {
  try {
    await axios.post(`${API_URL}/sendMessage`, {
      chat_id: chatId,
      text: text
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err.response?.data);
  }
}

// Long Polling
let lastUpdateId = 0;
async function pollUpdates() {
  try {
    const response = await axios.get(`${API_URL}/getUpdates`, {
      params: { offset: lastUpdateId + 1, timeout: 30 }
    });

    const updates = response.data.result;
    if (updates.length > 0) {
      for (const update of updates) {
        if (update.message) {
          await handleMessage(update.message);
          lastUpdateId = update.update_id;
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
  } finally {
    setTimeout(pollUpdates, 1000);
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ —Ä–∞–Ω–µ–µ:');
console.log('npm install axios dotenv node-schedule');

// –ó–∞–ø—É—Å–∫
console.log('‚è∞ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω...');
pollUpdates();